[tool.poetry]
name = "generic-template"
version = "0.0.0"
description = "Generic Python project template."
authors = ["Kyle Finley <kyle@finley.sh>"]
license = "Apache-2.0"

[tool.poetry.dependencies]
python = "^3.9"

furo = { version = ">=2022.1.2", optional = true }  # docs
recommonmark = { version = ">=0.7.1", optional = true }  # docs
sphinx = { version = ">=4.4.0", optional = true }  # docs
sphinx-copybutton = { version = ">=0.4.0", optional = true }  # docs
sphinx-design = { version = ">=0.0.13", optional = true }  # docs
sphinxcontrib-apidoc = { version = ">=0.3", optional = true }  # docs

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.0"

[tool.poetry.group.lint.dependencies]
black = "^24.4.0"

[tool.poetry.group.test.dependencies]
coverage = "^7.4.4"
pytest = ">=7.0.1"
pytest-cov = ">=3.0.0"
pytest-mock = ">=3.7.0"

[tool.poetry.extras]
docs = [
  "furo",
  "recommonmark",
  "sphinx",
  "sphinx-copybutton",
  "sphinx-design",
  "sphinxcontrib-apidoc",
]

[build-system]
requires = ["poetry-core>=1.0.7"]
build-backend = "poetry.core.masonry.api"


[tool.black]
force-exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 88
target-version = ["py38", "py39"]


[tool.coverage.report]
exclude_lines = [
  "cov: ignore",  # standard exclude comment
  "if TYPE_CHECKING:",  # excluded blocks
  "if __name__ == .__main__.:",
  "raise AssertionError",  # defensive exceptions
  "raise NotImplementedError",
  "from pathlib import Path",
  "@overload",
]
# fail_under = 90  # set a minimum coverage percentage
precision = 2
show_missing = true

[tool.coverage.run]
omit = [
  "*/type_defs.py",  # assuming this would not contain any logic
]


[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/.eggs",
  "**/.git",
  "**/.venv",
  "**/docs",
  "**/node_modules",
  "**/typings",
]
pythonVersion = "3.9"
reportDuplicateImport = "none"
reportImportCycles = "none"
reportIncompatibleMethodOverride = "warning"
reportMissingTypeStubs = "none"
reportPrivateUsage = "none"
reportUnknownMemberType = "none"
reportUnnecessaryIsInstance = "warning"
reportUnusedImport = "none"
reportUnusedVariable = "none"
reportWildcardImportFromLibrary = "none"
strictParameterNoneValue = false
typeCheckingMode = "strict"
useLibraryCodeForTypes = true
venv = ".venv"


[tool.pytest.ini_options]
addopts = [
  "--cov-config=pyproject.toml",
  "--no-cov-on-fail",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::pytest_mock.PytestMockWarning",
]
markers = [
  "wip: isolate tests currently being worked on.",
]
minversion = 6.2
python_classes = ["Test*"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
testpaths = ["tests"]
